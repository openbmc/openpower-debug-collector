{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "16922b7d_d8e6981d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-12-27T06:53:10Z",
      "side": 1,
      "message": "Two suggestions",
      "revId": "3d439adafafc45e147c423f85cefd65ea7a602b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "062e2cf6_2f6ee46a",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-12-27T06:53:10Z",
      "side": 1,
      "message": "auto service \u003d getService(bus, interface, path);",
      "revId": "3d439adafafc45e147c423f85cefd65ea7a602b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2d2b7a1_c587f427",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 114,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-01-03T06:16:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "062e2cf6_2f6ee46a",
      "revId": "3d439adafafc45e147c423f85cefd65ea7a602b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c6380a7_1f6d52ad",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2022-12-27T06:53:10Z",
      "side": 1,
      "message": "As we are no longer using the map \"createParams\" after line no 118 thus it can be constructed in place rather than constructing earlier and then passing it to method.append(***) function. Advantage, implicit move constructor calling for in place initialization thus reducing a few function calls like map\u0027s constructor, copy constructor, destructor etc",
      "revId": "3d439adafafc45e147c423f85cefd65ea7a602b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0e73082_d0140cf4",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2023-01-03T06:16:00Z",
      "side": 1,
      "message": "Can you please add example?",
      "parentUuid": "4c6380a7_1f6d52ad",
      "revId": "3d439adafafc45e147c423f85cefd65ea7a602b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fe6dd44_ae120f0a",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 1001591
      },
      "writtenOn": "2023-01-03T12:54:42Z",
      "side": 1,
      "message": "What I meant here is we can do like this\nmethod.append(std::map\u003cstd::string, std::variant\u003cstd::string, uint64_t\u003e\u003e()); or\n\nclass TestClass\n    {\n        public:\n            void append(std::map\u003cstd::string, std::variant\u003cstd::string, uint64_t\u003e\u003e\u0026\u0026 mapParam)\n            {\n                std::variant\u003cstd::string, uint64_t\u003e variantVal;\n                variantVal \u003d \"Swarnendu\";\n                auto name \u003d std::get\u003cstd::string\u003e(variantVal);\n                std::string empCode(\"0044IT\");\n                mapParam.emplace(empCode, variantVal);\n                for (const auto\u0026 itr : mapParam)\n                {\n                    std::cout \u003c\u003c \"EmpCode \u003d \" \u003c\u003c itr.first \u003c\u003c std::endl;\n                    std::cout \u003c\u003c \"EmpName \u003d \" \u003c\u003c std::get\u003cstd::string\u003e(itr.second) \u003c\u003c std::endl;\n                }\n            }\n    };\n\n    TestClass testObj;\n    std::map\u003cstd::string, std::variant\u003cstd::string, uint64_t\u003e\u003e myMap;\n    testObj.append(std::map\u003cstd::string, std::variant\u003cstd::string, uint64_t\u003e\u003e());\n\nif you have method append(arg\u0026\u0026 somearg) like. But I noticed that append takes a reference to the map so you need a l-value here.",
      "parentUuid": "e0e73082_d0140cf4",
      "revId": "3d439adafafc45e147c423f85cefd65ea7a602b7",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}