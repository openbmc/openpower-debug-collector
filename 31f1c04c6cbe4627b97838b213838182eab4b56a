{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "497ecd60_323b4551",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-01-04T09:37:06Z",
      "side": 1,
      "message": "ofstream same for other bit types of errors, as we are dealing with ofstream\n\ncould could have been simplified like this, unless you need to report open and write errors ... suggestion\n\n  try \n  {\n    std::ofstream ofs;\n    ofs.exceptions(std::ofstream::failbit | std::ofstream::badbit |\n        std::ofstream::eofbit);\n    ofs.open (\"/usr/bin/test.txt\", std::ofstream::out | std::ofstream::app);\n    ofs \u003c\u003c \" more lorem ipsum\";\n    ofs.close();\n  }  catch (const std::ofstream::failure\u0026 e) {\n       // Report the error and continue with dump collection\n        // even if the error log id cannot be written to the file.\n        report\u003cWrite\u003e(metadata::ERRNO(oe.code().value()),\n                      metadata::PATH(dumpPath.c_str()));\n  }",
      "range": {
        "startLine": 85,
        "startChar": 36,
        "endLine": 85,
        "endChar": 44
      },
      "revId": "31f1c04c6cbe4627b97838b213838182eab4b56a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6306b991_74505f35",
        "filename": "dump/dump_utils.cpp",
        "patchSetId": 11
      },
      "lineNbr": 111,
      "author": {
        "id": 1000089
      },
      "writtenOn": "2023-01-04T09:37:06Z",
      "side": 1,
      "message": "line 98 to 111 should go into line 88 as exception to write happens there. proper scoping",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 111,
        "endChar": 5
      },
      "revId": "31f1c04c6cbe4627b97838b213838182eab4b56a",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}