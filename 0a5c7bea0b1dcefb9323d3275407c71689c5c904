{
  "comments": [
    {
      "key": {
        "uuid": "64b1d452_1378afe3",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T09:49:49Z",
      "side": 1,
      "message": "In code, you are converting into hex by default so please add that point here i.e consumer of this interface must use non-hex value.",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "971d9648_616ae4e3",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T10:35:49Z",
      "side": 1,
      "message": "Generally if explicitly not saying hex or oct or bin it should be decimal",
      "parentUuid": "64b1d452_1378afe3",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5de6c278_73148d00",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T10:54:26Z",
      "side": 1,
      "message": "Still you can mention like doing hex conversion as per your implementation expectation.",
      "parentUuid": "971d9648_616ae4e3",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8a90746_016ed0a2",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T11:19:12Z",
      "side": 1,
      "message": "It is general assumption when we say number it is in base10.",
      "parentUuid": "5de6c278_73148d00",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bb71f58_fba5f858",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T11:21:03Z",
      "side": 1,
      "message": "anyway I am planning to push a commit in create to accept number here instead of string to avoid any further confusions",
      "parentUuid": "c8a90746_016ed0a2",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6caf891_b476cdf6",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2021-06-21T11:52:29Z",
      "side": 1,
      "message": "What is blocking to add this as part of this commit?",
      "parentUuid": "5bb71f58_fba5f858",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03668a5c_29a64492",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T11:56:10Z",
      "side": 1,
      "message": "that change is in phosphor-dbus-interfaces",
      "parentUuid": "f6caf891_b476cdf6",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da835498_d4296c0c",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000369
      },
      "writtenOn": "2021-06-21T12:47:27Z",
      "side": 1,
      "message": "Changing the API from number to string will break all code that has been written to the existing API definition.",
      "parentUuid": "03668a5c_29a64492",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f71b3a24_2b9570c8",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000369
      },
      "writtenOn": "2021-06-21T12:50:37Z",
      "side": 1,
      "message": "Changing from string to number I mean.",
      "parentUuid": "da835498_d4296c0c",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b829cf27_453b18b7",
        "filename": "README.md",
        "patchSetId": 10
      },
      "lineNbr": 43,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T12:55:42Z",
      "side": 1,
      "message": "no will not do in a day.. only if that commit get approved..",
      "parentUuid": "f71b3a24_2b9570c8",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e236eeba_819f4d00",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 393,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T09:49:49Z",
      "side": 1,
      "message": "Why not this line can not go into above try {} and catch {} block ? since you are decoding given error log id in that block ?",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35d43c4d_bd4743d7",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 393,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T10:14:38Z",
      "side": 1,
      "message": "the idea is if nothing is provided, that is not a valid command so throw error. but if an invalid number is passed create the dump with an error log",
      "parentUuid": "e236eeba_819f4d00",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd94c845_a37d033e",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 393,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T10:54:26Z",
      "side": 1,
      "message": "\u003e the idea is if nothing is provided\n\nSince your `params` is std::map so, you can use `find()` instead of `at()` to make sure whether the error log id is given or not and add log with an appropriate message.\n\n\u003e if an invalid number is passed\n\nRight, you will get an exception and you can catch that in your above try block \nbut, if you used `at()` then you cannot differentiate the error because `at()` and `stol()` will throw same exception `std::out_of_range` for different reason. \n\nJS: It\u0027s up to you - I am trying to avoid one more try{} and catch{} for error log  id process.",
      "parentUuid": "35d43c4d_bd4743d7",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c0570be_3e2561ca",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 393,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2021-06-21T15:35:55Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "cd94c845_a37d033e",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bab18f43_1c47d537",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 393,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-22T05:48:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c0570be_3e2561ca",
      "range": {
        "startLine": 393,
        "startChar": 7,
        "endLine": 393,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5b62380_de44637b",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 399,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T09:49:49Z",
      "side": 1,
      "message": "- errno will set for std:stol() ? I am not seeing any document on this (https://www.cplusplus.com/reference/string/stol/) can you point me the reference which one you are looking ?\n- you can use errno directly ? why one more variable here ?",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 399,
        "endChar": 25
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51f69bdb_bae9caae",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 399,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2021-06-21T10:11:16Z",
      "side": 1,
      "message": "asked add  strerror(errno) , missed to add strerror previous comment.",
      "parentUuid": "b5b62380_de44637b",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 399,
        "endChar": 25
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cb60569_cc443360",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 399,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T10:14:38Z",
      "side": 1,
      "message": "it throws out of range with setting the error no.\nsince log() can have system calls to be safe assigning to a variable",
      "parentUuid": "b5b62380_de44637b",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 399,
        "endChar": 25
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78536a9f_053c5efc",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 399,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T10:54:26Z",
      "side": 1,
      "message": "\u003e it throws out of range with setting the error no\n\nah sorry, I missed the underlying c function `std::strtol` call from c++ function call `stol()`\n\nand looks I am referring old document instead looking latest (https://en.cppreference.com/w/cpp/string/basic_string/stol) - sorry for the confusions.\n\n\u003e since log() can have system calls to be safe assigning to a variable\n\nok,",
      "parentUuid": "8cb60569_cc443360",
      "range": {
        "startLine": 399,
        "startChar": 8,
        "endLine": 399,
        "endChar": 25
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d389f4a7_eef43707",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 403,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T09:49:49Z",
      "side": 1,
      "message": "Can you add ERRMSG as well i.e strerror(errno) ?",
      "range": {
        "startLine": 403,
        "startChar": 31,
        "endLine": 403,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5825f33_cb80deb1",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 403,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T10:14:38Z",
      "side": 1,
      "message": "this should be fine.. already the inputs are documented",
      "parentUuid": "d389f4a7_eef43707",
      "range": {
        "startLine": 403,
        "startChar": 31,
        "endLine": 403,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f99b1e8d_59c1eb8b",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 403,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T10:54:26Z",
      "side": 1,
      "message": "Yeah, it is well documented but, we can look at trace itself instead of looking at document based on the error code.\n\nJS: It\u0027s up to you to include.",
      "parentUuid": "c5825f33_cb80deb1",
      "range": {
        "startLine": 403,
        "startChar": 31,
        "endLine": 403,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbf9da43_944649e8",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 403,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2021-06-21T15:35:55Z",
      "side": 1,
      "message": "printing errno  is cleaner way, and followed by BMC coding .",
      "parentUuid": "f99b1e8d_59c1eb8b",
      "range": {
        "startLine": 403,
        "startChar": 31,
        "endLine": 403,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc2e72b7_377f3b4a",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 403,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-22T05:48:31Z",
      "side": 1,
      "message": "errno is already there right?",
      "parentUuid": "dbf9da43_944649e8",
      "range": {
        "startLine": 403,
        "startChar": 31,
        "endLine": 403,
        "endChar": 36
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33365bf1_5350116d",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T09:49:49Z",
      "side": 1,
      "message": "I am not seeing any documentation on this i.e you are converting into hex irrespective of the given value is in hex format or not.\n\nis anywhere you mentioned like error log id must be non-hex format? if so, please point me.",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61f10134_5cbf7ff7",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T10:14:38Z",
      "side": 1,
      "message": "I am not explicitly specifying hex, then the general assumption it should be a decimal number.",
      "parentUuid": "33365bf1_5350116d",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9ab2711_70036874",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-21T10:54:26Z",
      "side": 1,
      "message": "I am not sure everyone knows the assumption what you are making here and it will be always good if we documented those assumption to avoid others confusion.",
      "parentUuid": "61f10134_5cbf7ff7",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "713ec949_655c02b4",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-21T11:19:12Z",
      "side": 1,
      "message": "It is very generic that if you dont mention it a decimal number and should explicitly mention if it is not base10",
      "parentUuid": "b9ab2711_70036874",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c236d4a2_fe54ecd7",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000086
      },
      "writtenOn": "2021-06-21T15:35:55Z",
      "side": 1,
      "message": "Documentation is alway\u0027s better for future refernce.",
      "parentUuid": "713ec949_655c02b4",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0997167_23442d41",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000084
      },
      "writtenOn": "2021-06-22T05:48:31Z",
      "side": 1,
      "message": "Yes here the problem is, explicitly stating a number should be decimal, do we really need to do that?",
      "parentUuid": "c236d4a2_fe54ecd7",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf35306e_f86907f1",
        "filename": "dump/dump_manager.cpp",
        "patchSetId": 10
      },
      "lineNbr": 410,
      "author": {
        "id": 1000427
      },
      "writtenOn": "2021-06-22T07:05:21Z",
      "side": 1,
      "message": "What happens if I give error id like below\n\n1234 vs 0x4D2",
      "parentUuid": "f0997167_23442d41",
      "range": {
        "startLine": 410,
        "startChar": 47,
        "endLine": 410,
        "endChar": 55
      },
      "revId": "0a5c7bea0b1dcefb9323d3275407c71689c5c904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}